<?php
// /usr/local/ispconfig/interface/plugins/redis/lib/classes/redis_config.inc.php

class RedisConfig {
    private $app;
    
    public function __construct() {
        global $app;
        $this->app = $app;
    }
    
    /**
     * Vordefinierte Optimierungskonfigurationen
     */
    public function getOptimizationTemplates() {
        return [
            'cache' => [
                'name' => 'Cache Optimized',
                'description' => 'Standard caching with LRU eviction',
                'config' => [
                    'maxmemory-policy' => 'allkeys-lru',
                    'save' => '',
                    'appendonly' => 'no',
                    'tcp-keepalive' => '300',
                    'timeout' => '0',
                    'databases' => '16'
                ]
            ],
            'fullpage' => [
                'name' => 'Full Page Cache',
                'description' => 'Optimized for full page caching with persistence',
                'config' => [
                    'maxmemory-policy' => 'allkeys-lru',
                    'save' => '900 1 300 10 60 10000',
                    'appendonly' => 'yes',
                    'appendfsync' => 'everysec',
                    'tcp-keepalive' => '60',
                    'timeout' => '0',
                    'databases' => '1'
                ]
            ],
            'session' => [
                'name' => 'Session Storage',
                'description' => 'Optimized for PHP session storage',
                'config' => [
                    'maxmemory-policy' => 'volatile-lru',
                    'save' => '',
                    'appendonly' => 'no',
                    'tcp-keepalive' => '300',
                    'timeout' => '300',
                    'databases' => '1'
                ]
            ],
            'custom' => [
                'name' => 'Custom Configuration',
                'description' => 'User-defined configuration',
                'config' => []
            ]
        ];
    }
    
    /**
     * Generiert Redis-Konfiguration aus Template
     */
    public function generateConfigFromTemplate($instance_data) {
        $templates = $this->getOptimizationTemplates();
        $template = $templates[$instance_data['redis_optimization_mode']] ?? $templates['cache'];
        
        $config = $this->loadMasterTemplate();
        
        // Template-Variablen ersetzen
        $replacements = [
            '{redis_name}' => $instance_data['redis_name'],
            '{redis_port}' => $instance_data['redis_port'],
            '{redis_bind}' => $instance_data['redis_bind'] ?: '127.0.0.1',
            '{redis_maxmemory}' => $instance_data['redis_maxmemory'] ?: '128mb',
            '{redis_maxmemory_policy}' => $instance_data['redis_maxmemory_policy'] ?: 'allkeys-lru',
            '{redis_password}' => $instance_data['redis_password'] ? "requirepass {$instance_data['redis_password']}" : '# No password set',
            '{redis_logfile}' => "/var/log/redis/redis-{$instance_data['redis_name']}.log",
            '{redis_dir}' => "/var/lib/redis/{$instance_data['redis_name']}/",
            '{redis_dbfilename}' => "dump-{$instance_data['redis_name']}.rdb"
        ];
        
        // Template-spezifische Konfiguration hinzufügen
        if (!empty($template['config'])) {
            $template_config = '';
            foreach ($template['config'] as $key => $value) {
                if (!empty($value)) {
                    $template_config .= "{$key} {$value}\n";
                }
            }
            $replacements['{optimization_config}'] = $template_config;
        } else {
            $replacements['{optimization_config}'] = '';
        }
        
        // Custom Config hinzufügen
        $replacements['{custom_config}'] = !empty($instance_data['redis_custom_config']) 
            ? "\n# Custom Configuration\n" . $instance_data['redis_custom_config'] 
            : '';
        
        return str_replace(array_keys($replacements), array_values($replacements), $config);
    }
    
    /**
     * Lädt Master-Template
     */
    private function loadMasterTemplate() {
        $template_file = ISPC_ROOT_PATH . '/plugins/redis/install/tpl/redis.conf.master';
        if (file_exists($template_file)) {
            return file_get_contents($template_file);
        }
        
        // Fallback: Standard-Template
        return $this->getDefaultTemplate();
    }
    
    /**
     * Standard Redis-Konfiguration Template
     */
    private function getDefaultTemplate() {
        return "# Redis Configuration for {redis_name}
# Generated by ISPConfig Redis Plugin

# Network
port {redis_port}
bind {redis_bind}
tcp-backlog 511

# General
timeout 0
tcp-keepalive 300
daemonize yes
supervised systemd
pidfile /var/run/redis/redis-{redis_name}.pid

# Logging
loglevel notice
logfile {redis_logfile}

# Persistence
dir {redis_dir}
dbfilename {redis_dbfilename}

# Memory Management
maxmemory {redis_maxmemory}
maxmemory-policy {redis_maxmemory_policy}

# Security
{redis_password}

# Optimization Configuration
{optimization_config}

{custom_config}
";
    }
    
    /**
     * Validiert Konfigurationswerte
     */
    public function validateConfig($data) {
        $errors = [];
        
        // Name validieren
        if (empty($data['redis_name'])) {
            $errors[] = 'Redis name is required';
        } elseif (!preg_match('/^[a-zA-Z0-9_-]+$/', $data['redis_name'])) {
            $errors[] = 'Redis name can only contain letters, numbers, hyphens and underscores';
        }
        
        // Memory validieren
        if (!empty($data['redis_maxmemory']) && !preg_match('/^\d+[kmgtKMGT]?[bB]?$/', $data['redis_maxmemory'])) {
            $errors[] = 'Invalid memory format. Use format like: 128mb, 1gb, 512kb';
        }
        
        // Port validieren (falls manuell gesetzt)
        if (!empty($data['redis_port']) && (!is_numeric($data['redis_port']) || $data['redis_port'] < 1024 || $data['redis_port'] > 65535)) {
            $errors[] = 'Port must be between 1024 and 65535';
        }
        
        return $errors;
    }
}
?>